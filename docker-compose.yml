services:
  postgres:
    image: postgres:16-alpine
    container_name: synesthesie_postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # aus .env übernommen
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - synesthesie_network
    healthcheck:
      # benutze Container-ENV (Doppel-$), nicht Host-Interpolation
      test: ["CMD-SHELL", "pg_isready -U $${DB_USER} -d $${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: synesthesie_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    env_file:
      - .env
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - synesthesie_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: synesthesie_api
    restart: unless-stopped
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - synesthesie_network
    volumes:
      - ./templates:/app/templates:ro
      - assets_data:${LOCAL_ASSETS_PATH:-/data/assets}
      - audio_cache:${AUDIO_CACHE_PATH:-/data/assets_cache/audio}
    healthcheck:
      # Prüft die API-Gesundheit auf dem korrekten Endpoint, vermeidet 404
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/api/v1/health | grep -q healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

volumes:
  postgres_data:
  redis_data:
  assets_data:
  audio_cache:

networks:
  synesthesie_network:
    driver: bridge